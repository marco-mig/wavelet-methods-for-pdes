function solution = poisson(J)
# Applying new methods to the poisson code
# Approximates the solution of the 1-d Poisson problem:
# -u''(x) = f(x) 
# using a wavelet basis for d = d_tilda = 2
# Solving the specific problem for f = 4*pi^2*sin(2*pi*x)

clear all
close all 

f = @(x) (4*pi^2)*sin(2*pi*x);
# Solution should be u(x) = sin(2*pi*x) 

# First create the wavelet basis 
fs{1} = @(x) phi(x);
for j=0:J
  for k=0:(2^j-1)
    fs{2^j+k+1} = @(x) 2^(j/2)*psi((2^j)*x-k);
  endfor
endfor   

# Then periodize 
for i=1:length(fs)
  fs{i} = @(x) fs{i}(x) + fs{i}(x-1) + fs{i}(x+1);
endfor

# Define the derivative of the scaling function 
function y = phid(x)
  ind1 = x > -1 & x < 0;
  ind2 = x >=0 & x <1;
  ind3 = x <= -1; 
  ind4 = x >= 1;
  y(ind1) = 1;
  y(ind2) = -1; 
  y(ind3) = 0;
  y(ind4) = 0;
endfunction

# Define the derivative of the mother wavelet 
function y=psidv(x)
  ind1 = x < -1;
  ind2 = x >= -1 & x < 0;
  ind3 = x >= 0 & x < 1/2;
  ind4 = x >= 1/2 & x < 1;
  ind5 = x >= 1 & x <= 2; 
  ind6 = x > 2;
  y(ind1) = 0;
  y(ind2) = -1/2;
  y(ind3) = 4;
  y(ind4) = -4;
  y(ind5) = 1/2;
  y(ind6) = 0;
endfunction

# Create the basis of wavelet derivatives 
dv{1} = @(x) 0;
for j=0:J
  for k=0:(2^j-1)
    dv{2^j+k+1} = @(x) 2^(3*j/2)*psidv((2^j)*x-k);
  endfor
endfor

# Periodize 
for i=1:length(dv)
  dv{i} = @(x) dv{i}(x) + dv{i}(x-1) + dv{i}(x+1);
endfor 

len = length(fs);

# Create the matrix A 
A = zeros(len);
h = @(x) (phid(x))^2;
A(1,1) = (1/2)*(h((1/2)*(-3^(1/2)/3+1)) + h((1/2)*(3^(1/2)/3+1)));
for j=0:J
  for k=0:2^j-1 
    for l=0:J
      for m=0:2^l-1 
        a1= (2^-j)*(k-1);
        b1= (2^-j)*(k+2);
        a2= (2^-l)*(m-1);
        b2= (2^-l)*(m+2);
        if b1-1 > 0
          c1 = 0;
        elseif b2-1 > 0
          c1 = 0;
        else
          c1 = max(0, min(a1,a2));
        endif
        
        if a1+1 < 1
          c2 = 1;
        elseif a2+1 < 1
          c2 = 1;
        else
          c2 = min(1, max(b1,b2));
        endif
        
        # First we find the matrix values when both functions are wavelets 
        q = 2^-(max(j,l)+1);
        grid = c1:q:c2; 
        h = @(x) dv{2^j+k+1}(x) * dv{2^l+m+1}(x);
        int1 = 0;
        for i=1:length(grid)-1
          d1 = grid(i);
          d2 = grid(i)+q;
          int1 = int1 + (d2-d1)/2 * (h((1/2)*((-(3^(1/2))/3)*(d2-d1) + d2 + d1)) + 
          h((1/2)*(((3^(1/2))/3)*(d2-d1) + d2 + d1)));
        endfor
        A(2^j+k+1, 2^l+m+1) = int1;
      endfor
    endfor
  endfor
endfor

# We consider separately the cases with the scaling function       
for j=0:J
  for k=0:2^j-1
    q = 2^(-j-1);
    grid = 0:q:1;
    h = @(x) dv{2^j+k+1}(x) * dv{1}(x);
    int2 = 0;
    for i=1:length(grid)-1
      d1 = grid(i);
      d2 = grid(i)+q;
      int2 = int2 + (d2-d1)/2 * (h((1/2)*((-(3^(1/2))/3)*(d2-d1) + d2 + d1)) +
          h((1/2)*(((3^(1/2))/3)*(d2-d1) + d2 + d1)));
    endfor
    A(1, 2^j+k+1) = int2;
    A(2^j+k+1, 1) = int2;
  endfor
endfor  
 

# Calculate the RHS 
b = zeros(len,1);
for i=1:len
  b(i) = quad(@(x) f(x) * fs{i}(x), 0, 1);
endfor

A1 = sparse(A);

ci = A1\b;

solution = @(x) 0;
for i=1:length(ci)
  solution = @(x) solution(x) + fs{i}(x)*ci(i);
endfor 

endfunction
